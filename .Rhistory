find_baseline <- function(x, n_points = 20L, k = 5L, filter_lows = TRUE) {
steps <- 1:length(x)
tmp <- baseline <- data.frame(x, steps)
# If requested, remove values avobe the expected average
if (filter_lows) {
m0 <- lm(x ~ steps, tmp)
baseline[resid(m0) <0,] <- NA
}
k <- k
min_index <- rep(0, n_points)
# Loop, find minimun and remove neigbours
for(i in seq_along(min_index)) {
if (sum(!is.na(baseline$x)) > 1) {
N_min_point <- baseline$steps[which.min(baseline$x)]
min_index[i] <- N_min_point
baseline[max(0, N_min_point - k) : min(nrow(baseline), N_min_point + k),] <- NA
}
}
m <- lm(x ~ steps, tmp[min_index,])
out <- list(baseline = predict(m, newdata = tmp))
out$resid <- x - out$baseline
return(out)
}
devtools::document()
library(MyFunctions)
??MyFunctions
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
??rel
ggplot2::rel()
?viewport
?...
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
