devtools::load_all(".")
dir.exists('C:/Users/scm/Documents/R/win-library/3.4/MyFunctions')
library(MyFunctions)
devtools::load_all(".")
hello()
range01()
range01(1:1000)
library(MyFunctions)
devtools::load_all(".")
kde2dCpp(x = runif(10),y = 1:10)
library(RcppEigen)
RcppEigen.package.skeleton(name = "MyFunctions")
RcppEigen.package.skeleton()
library(MyFunctions)
RcppEigen.package.skeleton("q4rcpp")
compileAttributes(verbose = T)
library(Rcpp)
compileAttributes(verbose = T)
RcppEigen.package.skeleton("q4rcpp")
RcppEigen.package.skeleton("MyFunctions")
RcppEigen.package.skeleton("MyFunctions")
RcppEigen.package.skeleton("MyFunctions")
compileAttributes(verbose = T)
> compileAttributes(pkgdir = "MyFunctions/",verbose = T)
> compileAttributes(pkgdir = "MyFunctions",verbose = T)
Rcpp.package.skeleton(name = "MyFunctions")
> compileAttributes(pkgdir = "MyFunctions",verbose = T)
compileAttributes(verbose = T)
library(MyFunctions)
devtools::load_all(".")
Rcpp.package.skeleton(name = "MyFunctions", attributes = T)
compileAttributes(verbose = T)
Rcpp::sourceCpp('R/eigenMapMatMult.cpp')
compileAttributes(verbose = T)
library(MyFunctions)
library(MyFunctions)
devtools::load_all(".")
for (f in list.files("somedir/R", full.names=TRUE)) parse(f)
lm_eq <- function(x, y, m = NULL){
if (m = NULL) {m <- lm(y ~ x);}
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq))
}
lm_eq <- function(x, y, m){
if (m = NULL) {m <- lm(y ~ x);}
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq))
}
lm_eq <- function(x, y, m = NULL){
if (m == NULL) {m <- lm(y ~ x);}
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq))
}
library(MyFunctions)
lm_eq(x = 1:100, y = 1:100)
library(MyFunctions)
lm_eq(x = 1:100, y = 1:100)
library(MyFunctions)
lm_eq(x = 1:100, y = 1:100)
library(MyFunctions)
lm_eq(x = 1:100, y = 1:100)
lm_eq <- function(x, y, m){
if (!exists(m)) {m <- lm(y ~ x)}
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq))
}
lm_eq(x = 1:100, y = 1:100)
lm_eq <- function(x, y, m = NULL){
if (is.null(m)) {m <- lm(y ~ x)}
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq))
}
lm_eq(1:100,1:100)
m <- lm(rnorm(100) ~ 1:100)
rnorm(100) ~ 1:100)
rnorm(100) ~ 1:100
rnorm(100)
m <- lm(y = rnorm(100), x = 1:100)
y = 1:100 + rnbinom(100)
y = 1:100 + rnorm(100)
x = 1:100
lm(y ~ x)
m <- lm(y ~ x)
lm_eq(m = m)
library(MyFunctions)
