if (border) {
panel.border <- ggplot2::element_rect(fill = NA, colour = "black",
size = 0.7)
axis.line <- ggplot2::element_blank()
}
else {
panel.border <- ggplot2::element_blank()
axis.line = ggplot2::element_line(colour = "black", size = 0.5)
}
if (margin)
plot.margin <- ggplot2::margin(half_line, half_line, half_line,
half_line)
else plot.margin <- unit(c(0.5, 0.3, 0.3, 0.3), "mm")
.theme <- ggthemes::theme_foundation(base_size = base_size, base_family = base_family) +
ggplot2::theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = panel.border,
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line.x = element_line(colour = "black", size = 1),
axis.line.y = element_line(colour = "black", size = 1),
axis.ticks = element_line(size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = legend,
legend.key.size= unit(0.2, "cm"),
panel.spacing  = unit(spacing, "cm"),
legend.title = element_text(face="italic"),
plot.margin = plot.margin,
strip.background=element_rect(colour=NA,fill=NA),
strip.text = element_text(face="bold")
)
if (x.text.angle != 0)
.theme <- .theme + theme(axis.text.x = element_text(angle = x.text.angle,
hjust = xhjust))
.theme
}
ggplot(d, aes(x = V1, y = V2)) + geom_point() + theme_Publication()
library(extrafont)
font_import()
loadfonts(device = "win")
windowsFonts()
theme_Publication <- function(base_size = 14, base_family = "Arial", x.text.angle = 0, border = FALSE,
margin = TRUE, legend = c("top", "bottom", "left", "right", "none"), spacing = 0.5) {
half_line <- base_size/2
if (!is.numeric(legend))
legend <- match.arg(legend)
if (x.text.angle > 5)
xhjust <- 1
else xhjust <- NULL
if (border) {
panel.border <- ggplot2::element_rect(fill = NA, colour = "black",
size = 0.7)
axis.line <- ggplot2::element_blank()
}
else {
panel.border <- ggplot2::element_blank()
axis.line = ggplot2::element_line(colour = "black", size = 0.5)
}
if (margin)
plot.margin <- ggplot2::margin(half_line, half_line, half_line,
half_line)
else plot.margin <- unit(c(0.5, 0.3, 0.3, 0.3), "mm")
.theme <- ggthemes::theme_foundation(base_size = base_size, base_family = base_family) +
ggplot2::theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = panel.border,
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line.x = element_line(colour = "black", size = 1),
axis.line.y = element_line(colour = "black", size = 1),
axis.ticks = element_line(size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = legend,
legend.key.size= unit(0.2, "cm"),
panel.spacing  = unit(spacing, "cm"),
legend.title = element_text(face="italic"),
plot.margin = plot.margin,
strip.background=element_rect(colour=NA,fill=NA),
strip.text = element_text(face="bold")
)
if (x.text.angle != 0)
.theme <- .theme + theme(axis.text.x = element_text(angle = x.text.angle,
hjust = xhjust))
.theme
}
ggplot(d, aes(x = V1, y = V2)) + geom_point() + theme_Publication()
ggplot(d, aes(x = V1, y = V2)) + geom_point() + theme_Publication(base_family = "Tahoma")
ggplot(d, aes(x = V1, y = V2)) + geom_point() + theme_Publication(base_family = "Roboto Th")
ggplot(d, aes(x = V1, y = V2)) + geom_point() + theme_Publication(base_family = "New Athena Unicode")
ggplot(d, aes(x = V1, y = V2)) + geom_point() + theme_Publication(base_family = "Helvetica")
# Load fonts when loading the package
.onLoad <- function(libname = find.package("extrafont"), pkgname = "extrafont") {
extrafont::loadfonts(device = "win")
}
roxygen2::roxygenise()
debugonce()
debugonce(devtools::test)
debugonce(devtools::test())
library(MyFunctions)
library(MyFunctions)
library(MyFunctions)
library(MyFunctions)
lintr:::addin_lint()
ggplot2::mean_se(rnorm(100))
extrafont::loadfonts(device = "win")
library(MyFunctions)
?floor
?round
library(MyFunctions)
devtools::document()
devtools::document()
devtools::document()
x <- rnorm(1000)
plot(x)
plot(x, type ="b")
x <- rnorm(500)
exp(-(1:500)^2)
exp(-(400 + 1:500)^2)
x <- x + exp(-(1:500 - 200)^2)
x <- x + 5* exp(-(1:500 - 200)^2)
plot(x)
x <- rnorm(500)
x <- x + 5* exp(-(1:500 - 200)^2)
plot(x)
plot(x, type = "b")
x <- rnorm(500)
x <- x + 5* exp(-(1:500 - 200)^2) +
5* exp(-(1:500 - 100)^2) +
5* exp(-(1:500 - 400)^2)
plot(x, type = "b")
x <- x + 5* exp(-(1:500 - 200)^2/10) +
5* exp(-(1:500 - 100)^2/10) +
5* exp(-(1:500 - 400)^2/10)
plot(x, type = "b")
x <- rnorm(500)
x <- x + 5* exp(-(1:500 - 200)^2/10) +
5* exp(-(1:500 - 100)^2/10) +
5* exp(-(1:500 - 400)^2/10)
plot(x, type = "b")
x <- rnorm(500)
x <- x + 5* exp(-(1:500 - 200)^2/20) +
5* exp(-(1:500 - 100)^2/20) +
5* exp(-(1:500 - 400)^2/20)
plot(x, type = "b")
steps <- 1:length(x)
tmp <- data.table::data.table(x, steps)
n_points <- 5
threshold <- 0.1
tmp <- tmp[x < quantile(x, probs = threshold)]
k <- 5
tmp[min(x), steps]
tmp[, steps]
tmp[x == min(x), steps]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
if(any(!is.na(temp))) {
N_min_point <- tmp[x == min(x), steps]
min_index[i] <- N_min_point
temp[max(0, N_min_point - k) : min(length(temp), N_min_point + k)] <- NA
}
}
for(i in seq_along(min_index)) {
N_min_point <- tmp[x == min(x), steps]
min_index[i] <- N_min_point
tmp[max(0, N_min_point - k) : min(length(tmp), N_min_point + k)] <- NA
}
tmp
steps <- 1:length(x)
tmp <- data.table::data.table(x, steps)
tmp <- tmp[x < quantile(x, probs = threshold)]
k <- 5
min_index <- rep(0, n_points)
N_min_point <- tmp[x == min(x), steps]
min_index[i] <- N_min_point
tmp[max(0, N_min_point - k) : min(length(tmp), N_min_point + k)] <- NA
tmp
tmp[, ref := 1:.N]
steps <- 1:length(x)
tmp <- data.table::data.table(x, steps)
tmp <- tmp[x < quantile(x, probs = threshold)]
tmp[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
N_min_point <- tmp[x == min(x), ref]
min_index[i] <- N_min_point
tmp[max(0, N_min_point - k) : min(length(tmp), N_min_point + k)] <- NA
tmp
for(i in seq_along(min_index)) {
N_min_point <- tmp[x == min(x), ref]
min_index[i] <- N_min_point
tmp[max(0, N_min_point - k) : min(length(tmp), N_min_point + k)] <- NA
}
steps <- 1:length(x)
tmp <- data.table::data.table(x, steps)
tmp <- tmp[x < quantile(x, probs = threshold)]
tmp[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
N_min_point <- tmp[x == min(x), ref]
min_index[i] <- N_min_point
tmp[max(0, N_min_point - k) : min(length(tmp), N_min_point + k)] <- NA
}
steps <- 1:length(x)
tmp <- data.table::data.table(x, steps)
tmp <- tmp[x < quantile(x, probs = threshold)]
tmp[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
N_min_point <- tmp[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
tmp[max(0, N_min_point - k) : min(length(tmp), N_min_point + k)] <- NA
}
i
tmp
max(0, N_min_point - k) : min(length(tmp), N_min_point + k)
steps <- 1:length(x)
tmp <- data.table::data.table(x, steps)
tmp <- tmp[x < quantile(x, probs = threshold)]
tmp[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
N_min_point <- tmp[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
tmp[max(0, N_min_point - k) : min(.N, N_min_point + k)] <- NA
}
steps <- 1:length(x)
tmp <- data.table::data.table(x, steps)
tmp <- tmp[x < quantile(x, probs = threshold)]
tmp[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
N_min_point <- tmp[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
tmp[max(0, N_min_point - k) : min(nrow(tmp), N_min_point + k)] <- NA
}
n_points = 10L
steps <- 1:length(x)
tmp <- data.table::data.table(x, steps)
tmp <- tmp[x < quantile(x, probs = threshold)]
tmp[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
N_min_point <- tmp[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
tmp[max(0, N_min_point - k) : min(nrow(tmp), N_min_point + k)] <- NA
}
m <- lm(x ~ steps, tmp)
steps <- 1:length(x)
tmp <- data.table::data.table(x, steps)
baseline <- tmp[x < quantile(x, probs = threshold)]
baseline[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
N_min_point <- baseline[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
baseline[max(0, N_min_point - k) : min(nrow(baseline), N_min_point + k)] <- NA
}
steps <- 1:length(x)
baseline <- data.table::data.table(x, steps)
baseline[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
N_min_point <- baseline[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
baseline[max(0, N_min_point - k) : min(nrow(baseline), N_min_point + k)] <- NA
}
steps <- 1:length(x)
baseline <- data.table::data.table(x, steps)
baseline[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
N_min_point <- baseline[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
baseline[max(0, N_min_point - k) : min(nrow(baseline), N_min_point + k)] <- NA
}
steps <- 1:length(x)
baseline <- data.table::data.table(x, steps)
baseline[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
N_min_point <- baseline[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
baseline[max(0, N_min_point - k) : min(nrow(baseline), N_min_point + k)] <- NA
}
baseline
View(baseline)
plot(baseline$steps, baseline$x)
tmp <- baseline <- data.table::data.table(x, steps)
steps <- 1:length(x)
tmp <- baseline <- data.table::data.table(x, steps)
baseline[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
N_min_point <- baseline[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
baseline[max(0, N_min_point - k) : min(nrow(baseline), N_min_point + k)] <- NA
}
m <- lm(x ~ steps, tmp[min_index])
ggplot2::ggplot(tmp[min_index], aes(x = steps, y = x)) + ggplot2::geom_line()
ggplot2::ggplot(tmp[min_index], ggplot2::aes(x = steps, y = x)) + ggplot2::geom_line()
out <- list(baseline = predict(m, newdata = baseline))
plot(x)
plot(x, type = "b")
plot(x, type = "b", pch = "16")
plot(x, type = "b", pch = 16)
lines(out$baseline, col = "red")
out$baseline
baseline
out <- list(baseline = predict(m, newdata = tmp))
out$resid <- x - out$baseline
lines(out$baseline, col = "red")
find_baseline <- function(x, threshold, n_points = 20L) {
steps <- 1:length(x)
tmp <- baseline <- data.table::data.table(x, steps)
baseline[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
if (!any(is.na(baseline$x))) {
N_min_point <- baseline[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
baseline[max(0, N_min_point - k) : min(nrow(baseline), N_min_point + k)] <- NA
}
}
m <- lm(x ~ steps, tmp[min_index])
out <- list(baseline = predict(m, newdata = tmp))
out$resid <- x - out$baseline
return(out)
}
find_baseline <- function(x, n_points = 20L) {
steps <- 1:length(x)
tmp <- baseline <- data.table::data.table(x, steps)
baseline[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
if (!any(is.na(baseline$x))) {
N_min_point <- baseline[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
baseline[max(0, N_min_point - k) : min(nrow(baseline), N_min_point + k)] <- NA
}
}
m <- lm(x ~ steps, tmp[min_index])
out <- list(baseline = predict(m, newdata = tmp))
out$resid <- x - out$baseline
return(out)
}
test <- find_baseline(x)
x <- rnorm(500)
x <- rnorm(500)
x <- x + 5* exp(-(1:500 - 200)^2/20) +
5* exp(-(1:500 - 100)^2/20) +
5* exp(-(1:500 - 400)^2/20)
plot(x, type = "b")
x <- rnorm(500)
x <- x + 5* exp(-(1:500 - 200)^2/20) +
5* exp(-(1:500 - 100)^2/20) +
5* exp(-(1:500 - 400)^2/20)
plot(x, type = "b", pch = 16)
test <- find_baseline(x)
lines(test$baseline, col = "red")
n_points = 20L
x <- rnorm(500)
x <- x + 5* exp(-(1:500 - 200)^2/20) +
5* exp(-(1:500 - 100)^2/20) +
5* exp(-(1:500 - 400)^2/20)
plot(x, type = "b", pch = 16)
steps <- 1:length(x)
tmp <- baseline <- data.table::data.table(x, steps)
baseline[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
if (!any(is.na(baseline$x))) {
N_min_point <- baseline[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
baseline[max(0, N_min_point - k) : min(nrow(baseline), N_min_point + k)] <- NA
}
}
!is.na(baseline$x) > 1
is.na(baseline$x)
!is.na(baseline$x)
sum(!is.na(baseline$x))
for(i in seq_along(min_index)) {
if (sum(!is.na(baseline$x)) > 1) {
N_min_point <- baseline[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
baseline[max(0, N_min_point - k) : min(nrow(baseline), N_min_point + k)] <- NA
}
}
find_baseline <- function(x, n_points = 20L) {
steps <- 1:length(x)
tmp <- baseline <- data.table::data.table(x, steps)
baseline[, ref := 1:.N]
k <- 5
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
if (sum(!is.na(baseline$x)) > 1) {
N_min_point <- baseline[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
baseline[max(0, N_min_point - k) : min(nrow(baseline), N_min_point + k)] <- NA
}
}
m <- lm(x ~ steps, tmp[min_index])
out <- list(baseline = predict(m, newdata = tmp))
out$resid <- x - out$baseline
return(out)
}
test <- find_baseline(x)
lines(test$baseline, col = "red")
devtools::document()
x <- rnorm(500)
x <- x + 5* exp(-(1:500 - 200)^2/20) +
5* exp(-(1:500 - 100)^2/20) +
5* exp(-(1:500 - 400)^2/20)
plot(x, type = "b", pch = 16)
example <- find_baseline(x)
lines(example$baseline, col = "red")
find_baseline <- function(x, n_points = 20L, k = 5L) {
steps <- 1:length(x)
tmp <- baseline <- data.table::data.table(x, steps)
baseline[, ref := 1:.N]
k <- 5L
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
if (sum(!is.na(baseline$x)) > 1) {
N_min_point <- baseline[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
baseline[max(0, N_min_point - k) : min(nrow(baseline), N_min_point + k)] <- NA
}
}
m <- lm(x ~ steps, tmp[min_index])
out <- list(baseline = predict(m, newdata = tmp))
out$resid <- x - out$baseline
return(out)
}
lines(find_baseline(x)$baseline, col = "red")
lines(find_baseline(x, k = 20)$baseline, col = "red")
lines(find_baseline(x, k = 50)$baseline, col = "red")
find_baseline <- function(x, n_points = 20L, k = 5L) {
steps <- 1:length(x)
tmp <- baseline <- data.table::data.table(x, steps)
baseline[, ref := 1:.N]
k <- k
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
if (sum(!is.na(baseline$x)) > 1) {
N_min_point <- baseline[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
baseline[max(0, N_min_point - k) : min(nrow(baseline), N_min_point + k)] <- NA
}
}
m <- lm(x ~ steps, tmp[min_index])
out <- list(baseline = predict(m, newdata = tmp))
out$resid <- x - out$baseline
return(out)
}
lines(find_baseline(x, k = 20)$baseline, col = "red")
lines(find_baseline(x, k = 50)$baseline, col = "red")
lines(find_baseline(x, k = 150)$baseline, col = "red")
lines(find_baseline(x, k = 350)$baseline, col = "red")
lines(find_baseline(x, k = 490)$baseline, col = "red")
find_baseline <- function(x, n_points = 20L, k = 5L) {
steps <- 1:length(x)
tmp <- baseline <- data.table::data.table(x, steps)
baseline[, ref := 1:.N]
k <- k
min_index <- rep(0, n_points)
for(i in seq_along(min_index)) {
if (sum(!is.na(baseline$x)) > 1) {
N_min_point <- baseline[x == min(x, na.rm = T), ref]
min_index[i] <- N_min_point
baseline[max(0, N_min_point - k) : min(nrow(baseline), N_min_point + k)] <- NA
}
}
m <- lm(x ~ steps, tmp[min_index])
out <- list(baseline = predict(m, newdata = tmp))
out$resid <- x - out$baseline
return(out)
}
library(data.table)
d <- data.table(x = rnorm(100))
d[, find_baseline(x)]
rm(x)
d
library(data.table)
d[, find_baseline(x)]
