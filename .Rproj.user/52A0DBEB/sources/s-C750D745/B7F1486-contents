library(reshape2)
library(data.table)
library(purrr)
library(dplyr)
#' @title Data importer from plate reader
#' @description Function to import the reads of a time serie from the plate reader at the Dr Summers Lab.
#'  @param file_list a list with the file paths in format .txt to be imported
##' @param wl vector with all the wavelenght measured
##' @param tp an integer with the total number of time points
##' @param Columns a list containing "n" vectors of lenght 12 with all the conditions across columns in the plate
##' @param Rows a list containing "n" vectors of lenght 8 with all the conditions across rows in the plate
##'
##' @return "D" a data.table containing all the reads, times, and conditions
##' @author Santiago Ca単o-Mu単iz
##' @export

Plate_reader<-function(file_list=file_list,wl=wl,Rows=Rows,Columns=Columns){
  D<-purrr::map(file_list,function(i,wl,Rows,Columns){
    names<-read.delim(file = paste0(path,i), header=F, skip=2,nrows = 1,stringsAsFactors = F)
    names<-names[-99]
    tmp<-read.delim(file = paste0(path,i), header=F, skip=3)
    tmp<-tmp[-nrow(tmp),]
    tmp<-select(tmp,-V99)
    colnames(tmp)<-names[1,]
    tmp$wavelength<-rep(wl, each = nrow(tmp))       # add wavelength
    tmp<-reshape2::melt(select(tmp,-`Temperature(\xa1C)`), id.vars=c('Time(hh:mm:ss)',"wavelength"),var='Cell')
    #add conditions from rows and columns
    tmp$Experiment<-as.character(i)
    tmp<-cbind(tmp,Columns,Rows)
    for(clmns in 1:length(Columns)){
      cols<-as.numeric(substr(tmp$Cell,2,nchar(as.character(tmp$Cell))))
      tmp[,names(Columns[clmns])]<-Columns[[clmns]][cols]
    }
    for(rws in 1:length(Rows)){
      rws_temp<-substr(as.character(tmp$Cell),1,1)
      tmp[,names(Rows[rws])]<-Rows[[rws]][rws_temp]
    }
    tmp
  }
  ,wl=wl,Rows=Rows,Columns=Columns)
  #merge data.frames
  D<-do.call("rbind", D)
  #Transform time from hh:ss to numeric
  #add time
  D$Time<-ifelse(nchar(as.character(D$`Time(hh:mm:ss)`))==4,
                 paste0("00:0",as.character(D$`Time(hh:mm:ss)`)),
                 ifelse(nchar(as.character(D$`Time(hh:mm:ss)`))<7,
                        paste0("00:",as.character(D$`Time(hh:mm:ss)`)),as.character(D$`Time(hh:mm:ss)`)))
  D$Time<-sapply(strsplit(D$Time,":"),
                 function(x) {
                   x <- as.numeric(x)
                   x[1]+x[2]/60+x[3]/3600
                 }
  )
  D<-data.table(D)
  D<-D[,`Time(hh:mm:ss)`:=NULL]
  return(D)
}

#Static plate reader importer
Plate_readerStatic<-function(file_list=file_list,wl=wl,tp=tp,Rows=Rows,Columns=Columns){
  D<-purrr::map(file_list,function(i,wl,tp,Rows,Columns){
    names<-read.delim(file = paste0(path,i), header=F, skip=2,nrows = 1,stringsAsFactors = F)
    names<-names[c(-1,-99)]
    tmp<-read.delim(file = paste0(path,i), header=F, skip=3)
    tmp<-tmp[-nrow(tmp),]    
    tmp<-select(tmp,-V1,-V99)
    colnames(tmp)<-names[1,]
    tmp$wavelength<-rep(wl, each = nrow(tmp))       # add wavelength
    tmp<-reshape2::melt(select(tmp,-`Temperature(\xa1C)`), id.vars=c("wavelength"),var='Cell')
    #add conditions from rows and columns
    tmp$Experiment<-as.character(i)
    tmp<-cbind(tmp,Columns,Rows)
    for(clmns in 1:length(Columns)){
      cols<-as.numeric(substr(tmp$Cell,2,nchar(as.character(tmp$Cell))))
      tmp[,names(Columns[clmns])]<-Columns[[clmns]][cols]
    }
    for(rws in 1:length(Rows)){
      rws_temp<-substr(as.character(tmp$Cell),1,1)
      tmp[,names(Rows[rws])]<-Rows[[rws]][rws_temp]
    }
    tmp
  }
  ,wl=wl,tp=tp,Rows=Rows,Columns=Columns)
  #merge data.frames
  D<-do.call("rbind", D)
  D<-data.table::data.table(D)
  return(D)
}






##' @export

library(grid)
library(ggthemes)
library(extrafont)
loadfonts(device="win", quiet = T)
theme_Publication <- function(base_size=14, base_family="Calibri", x.text.angle = 0, border = FALSE,
                              margin = TRUE, legend = c("top", "bottom", "left", "right", "none"), spacing = 0.5) {
  half_line <- base_size/2
  if (!is.numeric(legend)) 
    legend <- match.arg(legend)
  if (x.text.angle > 5) 
    xhjust <- 1
  else xhjust <- NULL
  if (border) {
    panel.border <- element_rect(fill = NA, colour = "black", 
                                 size = 0.7)
    axis.line <- element_blank()
  }
  else {
    panel.border <- element_blank()
    axis.line = element_line(colour = "black", size = 0.5)
  }
  if (margin) 
    plot.margin <- margin(half_line, half_line, half_line, 
                          half_line)
  else plot.margin <- unit(c(0.5, 0.3, 0.3, 0.3), "mm")
  .theme <- ggthemes::theme_foundation(base_size=base_size, base_family=base_family) +
    ggplot2::theme(plot.title = element_text(face = "bold",
                                             size = rel(1.2), hjust = 0.5),
                   text = element_text(),
                   panel.background = element_rect(colour = NA),
                   plot.background = element_rect(colour = NA),
                   panel.border = panel.border,
                   axis.title = element_text(face = "bold",size = rel(1)),
                   axis.title.y = element_text(angle=90,vjust =2),
                   axis.title.x = element_text(vjust = -0.2),
                   axis.text = element_text(),
                   axis.line.x = element_line(colour = "black", size = .5),
                   axis.line.y = element_line(colour = "black", size = .5),            
                   axis.ticks = element_line(),
                   panel.grid.major = element_line(colour="#f0f0f0"),
                   panel.grid.minor = element_blank(),
                   legend.key = element_rect(colour = NA),
                   legend.position = legend,
                   legend.key.size= unit(0.2, "cm"),
                   panel.spacing  = unit(spacing, "cm"),
                   legend.title = element_text(face="italic"),
                   plot.margin = plot.margin, 
                   strip.background=element_rect(colour=NA,fill=NA),
                   strip.text = element_text(face="bold")
    ) 
  if (x.text.angle != 0) 
    .theme <- .theme + theme(axis.text.x = element_text(angle = x.text.angle, 
                                                        hjust = xhjust))
  .theme
  
}

# Scientific axis
#this function writes the axis numbers in scientific formant
scientific_axis <- function(x) {
  # turn in to character string in scientific notation
  x <- paste0(1,"e",x)
  # turn the 'e+' into plotmath format
  x <- gsub("e", "%*%10^", x)
  # return this as an expression
  parse(text=x)
}


#plot regression equation

lm_eq <- function(df){
  m <- lm(y ~ x, df);
  eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2, 
                   list(a = format(coef(m)[1], digits = 2), 
                        b = format(coef(m)[2], digits = 2), 
                        r2 = format(summary(m)$r.squared, digits = 3)))
  as.character(as.expression(eq));                 
}


ggplotRegression <- function (m) {
  eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2, 
                   list(a = format(coef(m)[1], digits = 2), 
                        b = format(coef(m)[2], digits = 2), 
                        r2 = format(summary(m)$r.squared, digits = 3)))
  as.character(as.expression(eq))
    ggplot2::ggplot(m$model, aes_string(x = names(m$model)[2], y = names(m$model)[1])) + 
    ggplot2::geom_point() +
    ggplot2::stat_smooth(method = "lm", col = "red") +
    ggplot2::labs(title = eq)
}


#Scale values into a range 0 to 1
range01 <- function(x){(x-min(x,na.rm = T))/(max(x,na.rm = T)-min(x,na.rm = T))}


#' @title Data importer from plate Fluorescent reader in pathology
#' @description Function to import the reads of a time serie from the plate reader at the Dr Summers Lab.
#'  @param file_list a list with the file paths in format .txt to be imported
##' @param wl vector with all the wavelenght measured
##' @param tp an integer with the total number of time points
##' @param Columns a list containing "n" vectors of lenght 12 with all the conditions across columns in the plate
##' @param Rows a list containing "n" vectors of lenght 8 with all the conditions across rows in the plate
##'
##' @return "D" a data.table containing all the reads, times, and conditions
##' @author Santiago Ca単o-Mu単iz
##' @export



library(readxl)
Fl_PlateReader<-function(file_list=file_list,Rows=Rows,Columns=Columns){
D<-purrr::map(file_list,function(i){
  sheets<-excel_sheets(paste0(path,i))
  short_path<-gsub(paste0(wd,"/"), "", path)
  #import sheets individually
  book_tmp<-purrr::map(sheets, function(n,Rows,Columns){
    tmp <- read_excel(paste0(short_path,i), 
                    sheet = n, skip = 1)
    tmp<-data.table(tmp)
    tmp<-reshape2::melt(tmp, id.vars=c("Kinetic read"),var='Cell')
    tmp$sheet<-n
    tmp<-data.frame(tmp)
    #add conditions
    tmp<-cbind(tmp,Columns,Rows)
    for(clmns in 1:length(Columns)){
      cols<-as.numeric(substr(tmp$Cell,2,nchar(as.character(tmp$Cell))))
      tmp[,names(Columns[clmns])]<-Columns[[clmns]][cols]
    }
    for(rws in 1:length(Rows)){
      rws_temp<-substr(as.character(tmp$Cell),1,1)
      tmp[,names(Rows[rws])]<-Rows[[rws]][rws_temp]
    }
    tmp
    return(tmp)
  },Rows=Rows,Columns=Columns)
  book_tmp<-do.call("rbind", book_tmp)
  book_tmp$Experiment<-as.character(i)
  return(book_tmp)
})
#merge data.frames
D<-do.call("rbind", D)
D<-data.table::data.table(D)
#add time
D[,
         Time :=.(c(as.numeric(Kinetic.read)-as.numeric(Kinetic.read[1]))/3600), #conver date into time
         by=Cell]
return(D)  
}


#summarize data set
fsApply_1col<-function(x,y="FSC",FUN=median(),...){
  .f<-function(x){ FUN(exprs(x)[,y],...)}
  result<-fsApply(x, FUN = .f)
  .n<-row.names(result)
  result<-c(result)
  names(result)<-rep(x = .n,length(result)/length(.n))
  return(result)
}



# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}


# Flow cytometry Fs apply for only one column
fsApply_1col<-function(x,y="FSC",FUN=median(),...){
  .f<-function(x){ FUN(exprs(x)[,y],...)}
  result<-flowCore::fsApply(x, FUN = .f)
  .n<-row.names(result)
  result<-c(result)
  names(result)<-rep(x = .n,length(result)/length(.n))
  return(result)
}

# Calculate geom mean
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}

# Simulate normal distributions

nboot <- function(x, R) {
  n <- length(x)
  m <- mean(x)
  s <- sd(x)
  do.call(rbind,
          lapply(1 : R,
                 function(i) {
                   xx <- sort(nsim(n, m, s))
                   p <- seq_along(x) / n - 0.5 / n
                   data.frame(x = xx, p = p, sim = i)
                 }))
}

# Internal function for simulation

nsim <- function(n, m = 0, s = 1) {
  z <- rnorm(n)
  m + s * ((z - mean(z)) / sd(z))
}
